import requests
import random
import time
import logging
from typing import List
from concurrent.futures import ThreadPoolExecutor, as_completed

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("chatbot.log"),
        logging.StreamHandler()
    ]
)

# C·∫•u h√¨nh
BASE_URL = "https://qwen7b.gaia.domains"
MODEL = "Qwen2.5-7B-Instruct-Q5_K_M"
MAX_RETRIES = 100  
RETRY_DELAY = 5  
QUESTION_DELAY = 1  
WIKI_API_URL = "https://en.wikipedia.org/api/rest_v1/page/random/title"
NUM_QUESTIONS = 5 # S·ªë c√¢u h·ªèi ch·∫°y c√πng l√∫c


def get_random_question() -> str:
    """L·∫•y m·ªôt ƒëo·∫°n t√≥m t·∫Øt t·ª´ Wikipedia v√† chuy·ªÉn th√†nh c√¢u h·ªèi r·∫•t chi ti·∫øt."""
    try:
        # L·∫•y ti√™u ƒë·ªÅ ng·∫´u nhi√™n
        response = requests.get(WIKI_API_URL, timeout=10)
        if response.status_code == 200:
            title = response.json().get("items", [{}])[0].get("title", "Unknown Topic")

            # L·∫•y n·ªôi dung t√≥m t·∫Øt t·ª´ Wikipedia d·ª±a tr√™n ti√™u ƒë·ªÅ
            summary_url = f"https://en.wikipedia.org/api/rest_v1/page/summary/{title}"
            summary_response = requests.get(summary_url, timeout=10)

            if summary_response.status_code == 200:
                summary = summary_response.json().get("extract", "Kh√¥ng c√≥ th√¥ng tin.")
                return f"Ch·ªß ƒë·ªÅ '{title}' l√† m·ªôt kh√°i ni·ªám c√≥ t·∫ßm ·∫£nh h∆∞·ªüng r·ªông r√£i trong nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau. Tuy nhi√™n, ƒë·ªÉ c√≥ c√°i nh√¨n s√¢u s·∫Øc h∆°n v·ªÅ ch·ªß ƒë·ªÅ n√†y, b·∫°n c√≥ th·ªÉ cung c·∫•p cho t√¥i c√°c th√¥ng tin chi ti·∫øt sau ƒë√¢y: 1) L·ªãch s·ª≠ h√¨nh th√†nh v√† s·ª± ph√°t tri·ªÉn c·ªßa ch·ªß ƒë·ªÅ n√†y qua c√°c th·ªùi k·ª≥, ƒë·∫∑c bi·ªát l√† nh·ªØng s·ª± ki·ªán quan tr·ªçng ƒë√£ th√∫c ƒë·∫©y s·ª± thay ƒë·ªïi c·ªßa n√≥; 2) C√°c nh√¢n v·∫≠t l·ªãch s·ª≠ hay nh·ªØng t·ªï ch·ª©c c√≥ ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn s·ª± h√¨nh th√†nh v√† ph√°t tri·ªÉn c·ªßa ch·ªß ƒë·ªÅ n√†y; 3) T√°c ƒë·ªông c·ªßa ch·ªß ƒë·ªÅ n√†y ƒë·ªëi v·ªõi x√£ h·ªôi v√† c√°c lƒ©nh v·ª±c kh√°c nh∆∞ khoa h·ªçc, ngh·ªá thu·∫≠t, ch√≠nh tr·ªã, v√† vƒÉn h√≥a; 4) Nh·ªØng thay ƒë·ªïi ƒë√°ng ch√∫ √Ω trong c√°ch m√† con ng∆∞·ªùi ti·∫øp c·∫≠n ho·∫∑c hi·ªÉu v·ªÅ ch·ªß ƒë·ªÅ n√†y theo th·ªùi gian, v√† li·ªáu c√≥ s·ª± thay ƒë·ªïi l·ªõn n√†o trong t∆∞ duy hay ph∆∞∆°ng ph√°p lu·∫≠n kh√¥ng; 5) C√°c ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa ch·ªß ƒë·ªÅ n√†y trong ƒë·ªùi s·ªëng h√†ng ng√†y hay trong c√°c ng√†nh c√¥ng nghi·ªáp kh√°c nhau; 6) T√¨nh h√¨nh hi·ªán t·∫°i v√† nh·ªØng tranh lu·∫≠n ƒëang di·ªÖn ra li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ n√†y, li·ªáu c√≥ nh·ªØng quan ƒëi·ªÉm tr√°i chi·ªÅu n√†o kh√¥ng? B·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c v·∫•n ƒë·ªÅ n√†y v√† gi·∫£i th√≠ch th√™m v·ªÅ nh·ªØng ·∫£nh h∆∞·ªüng m√† ch·ªß ƒë·ªÅ n√†y c√≥ th·ªÉ mang l·∫°i cho t∆∞∆°ng lai kh√¥ng?"

            else:
                logging.warning(f"Wiki Summary API Error ({summary_response.status_code}): {summary_response.text}")

        else:
            logging.warning(f"Wiki API Error ({response.status_code}): {response.text}")

    except Exception as e:
        logging.error(f"Failed to fetch question from Wikipedia: {str(e)}")
    
    return "C√¢u h·ªèi ng·∫´u nhi√™n kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c."

def chat_with_ai(api_key: str, question: str) -> str:
    """G·ª≠i c√¢u h·ªèi ƒë·∫øn AI API v√† nh·∫≠n c√¢u tr·∫£ l·ªùi."""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    messages = [
        {"role": "user", "content": question}
    ]

    data = {
        "model": MODEL,
        "messages": messages,
        "temperature": 0.7
    }

    for attempt in range(MAX_RETRIES):
        try:
            logging.info(f"Attempt {attempt+1} for question: {question[:50]}...")
            response = requests.post(
                f"{BASE_URL}/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )

            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]

            logging.warning(f"API Error ({response.status_code}): {response.text}")
            time.sleep(RETRY_DELAY)

        except Exception as e:
            logging.error(f"Request failed: {str(e)}")
            time.sleep(RETRY_DELAY)

    return "Kh√¥ng th·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ AI."


def run_bot(api_key: str):
    while True:
        logging.info(f"Fetching {NUM_QUESTIONS} random questions...")

        # L·∫•y 5 c√¢u h·ªèi t·ª´ Wikipedia
        with ThreadPoolExecutor() as executor:
            questions = list(executor.map(lambda _: get_random_question(), range(NUM_QUESTIONS)))


        logging.info("Generated questions:")
        for q in questions:
            logging.info(f"- {q}")

        # G·ª≠i 5 c√¢u h·ªèi ƒë·∫øn AI song song
        responses = {}
        with ThreadPoolExecutor() as executor:
            future_to_question = {executor.submit(chat_with_ai, api_key, q): q for q in questions}

            for future in as_completed(future_to_question):
                question = future_to_question[future]
                try:
                    responses[question] = future.result()
                except Exception as e:
                    logging.error(f"Failed to process question '{question}': {str(e)}")
                    responses[question] = "L·ªói khi nh·∫≠n ph·∫£n h·ªìi."

        # In k·∫øt qu·∫£
        for question, response in responses.items():
            print(f"\nüìå C√¢u h·ªèi: {question}\nüí° Tr·∫£ l·ªùi: {response}\n" + "-"*50)

        logging.info(f"Sleeping {QUESTION_DELAY} seconds before next batch...")
        time.sleep(QUESTION_DELAY)


def main():
    api_key = input("Nh·∫≠p API key = ")
    run_bot(api_key)


if __name__ == "__main__":
    main()
